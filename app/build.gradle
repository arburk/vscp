plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'jacoco'
  id "org.sonarqube" version "4.2.1.3168"
}

android {
  namespace 'com.github.arburk.vscp.app'
  compileSdk 33

  defaultConfig {
    applicationId "com.github.arburk.vscp.app"
    minSdk 25
    targetSdk 33
    versionCode 1
    versionName "1.0"

    //testInstrumentationRunner "com.github.arburk.vscp.app.AndroidJunitRunnerWithDexOpener"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      debuggable false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      testCoverageEnabled true
      debuggable true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  kotlinOptions {
    // android.kotlinOptions and kotlin.compilerOptions configuration blocks override each other. The last (lowest) block takes effect.
    jvmTarget = '1.8'
  }

  buildFeatures {
    viewBinding true
  }

  testOptions {

    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
      all {
        useJUnitPlatform()
        jacoco {
          jacoco.includeNoLocationClasses = true
          jacoco.excludes = ['jdk.internal.*']
        }
        jvmArgs '--add-opens', 'java.base/java.lang=ALL-UNNAMED'
      }
    }

    managedDevices {
      devices {
        nexus5api27 (com.android.build.api.dsl.ManagedVirtualDevice) {
          device = "Nexus 5"
          apiLevel = 27
          systemImageSource = "aosp"
        }
        pixel3api30(com.android.build.api.dsl.ManagedVirtualDevice) {
          device = "Pixel 3"
          apiLevel = 30
          // Also use the AOSP Automated Test Device image for better emulator performance
          systemImageSource = "aosp-atd"
        }
      }
    }

    packagingOptions {
      exclude 'META-INF/DEPENDENCIES'
      exclude 'META-INF/LICENSE*.*'
      exclude 'META-INF/NOTICE*.*'
      exclude 'META-INF/notice.txt'
      exclude 'META-INF/ASL2.0'
      exclude 'META-INF/LGPL2.1'
      exclude 'META-INF/AL2.0'
      exclude("META-INF/*.kotlin_module")
    }
  }
}

sonarqube {
  properties {
    property "sonar.projectKey", "arburk_vscp"
    property "sonar.organization", "arburk"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

apply plugin: 'jacoco'

jacoco {
  version = "0.8.11"
  toolVersion = "0.8.11"
}

tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn(testDebugUnitTest)
  dependsOn(testReleaseUnitTest)
  //dependsOn(compileDebugJavaWithJavac)
  //dependsOn(compileDebugKotlin)
  //dependsOn(nexus5api27DebugAndroidTest)
  //dependsOn(pixel3api30DebugAndroidTest)

  reports {
    xml.getRequired().set(true)
    html.getRequired().set(true)
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def javaTree = fileTree(dir: "$project.projectDir/build/intermediates/javac/debug/classes", excludes: fileFilter)
  def kotlinTree = fileTree(dir: "$project.projectDir/build/tmp/kotlin-classes/debug", excludes: fileFilter)

  sourceDirectories.setFrom(files(["${project.projectDir}/src/main/java"]))
  classDirectories.from = files([javaTree, kotlinTree])
  executionData.setFrom(fileTree(dir: "$projectDir/build", includes: [
      "jacoco/testReleaseUnitTest.exec",
      "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
     // "outputs/managed_device_code_coverage/**/coverage.ec",
     // "outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec",
  ]))
}

dependencies {
  implementation 'androidx.core:core-ktx:1.10.1'
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'com.google.android.material:material:1.9.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
  implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
  implementation 'androidx.preference:preference:1.2.0'
  implementation 'androidx.activity:activity-ktx:1.7.2'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'

  // If using JUnit Jupiter
  testImplementation "org.junit.jupiter:junit-jupiter:$junitJupiterVersion"
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testImplementation "org.mockito:mockito-core:$mockitoVersion"
  testImplementation "org.awaitility:awaitility:4.2.0"

  // Optional -- Robolectric environment
  //  testImplementation "androidx.test:core:$androidXTestVersion"

  // Optional -- mockito-kotlin
  //  testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
  // Optional -- Mockk framework
  //  testImplementation "io.mockk:mockk:$mockkVersion"

  testImplementation 'androidx.test.ext:junit-ktx:1.1.5'
  androidTestImplementation 'com.github.tmurakami:dexopener:2.0.5'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  // androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
  androidTestImplementation 'androidx.test:runner:1.5.2'
  // androidTestImplementation 'androidx.test:rules:1.5.0'
  // androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.7.1'
  // androidTestImplementation "io.mockk:mockk-android:$mockkVersion"
  // androidTestImplementation "io.mockk:mockk-agent:$mockkVersion"
  // androidTestImplementation 'io.insert-koin:koin-test-junit4:3.0.2'

  // debugImplementation "androidx.fragment:fragment-testing:$fragmentTestingVersion"
}