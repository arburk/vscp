plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'jacoco'
  id "org.sonarqube" version "4.2.1.3168"
}

sonarqube {
  properties {
    property "sonar.projectKey", "arburk_vscp"
    property "sonar.organization", "arburk"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

android {
  namespace 'com.github.arburk.vscp.app'
  compileSdk 33

  defaultConfig {
    applicationId "com.github.arburk.vscp.app"
    minSdk 25
    targetSdk 33
    versionCode 1
    versionName "1.0"

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      debuggable false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
    debug {
      testCoverageEnabled true
      debuggable true
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }

  kotlinOptions {
    // android.kotlinOptions and kotlin.compilerOptions configuration blocks override each other. The last (lowest) block takes effect.
    jvmTarget = '17'
  }

  buildFeatures {
    viewBinding true
  }

  testOptions {
    unitTests {
      returnDefaultValues = true
      includeAndroidResources = true
      all {
        useJUnitPlatform()
        jacoco {
          jacoco.includeNoLocationClasses = true
          jacoco.excludes = ['jdk.internal.*']
        }
      }
    }
  }
}

apply plugin: 'jacoco'

jacoco {
  toolVersion = "0.8.9"
}

tasks.register('jacocoTestReport', JacocoReport) {
  dependsOn(testDebugUnitTest)
  dependsOn(testReleaseUnitTest)
  dependsOn(compileDebugJavaWithJavac)
  dependsOn(compileDebugKotlin)

  reports {
    xml.getRequired().set(true)
    html.getRequired().set(true)
  }

  def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
  def mainSrc = "${project.projectDir}/src/main/java"

  //java compiled classes
  def javaTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
  //kotlin compiled classes
  def kotlinTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)


  sourceDirectories.setFrom(files([mainSrc]))
  classDirectories.from = files([javaTree, kotlinTree])
  executionData.setFrom(fileTree(dir: "$buildDir", includes: [
      "jacoco/testReleaseUnitTest.exec",
      "outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec",
      "outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec",
  ]))
}

dependencies {
  implementation 'androidx.core:core-ktx:1.10.1'
  implementation 'androidx.appcompat:appcompat:1.6.1'
  implementation 'com.google.android.material:material:1.9.0'
  implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
  implementation 'androidx.navigation:navigation-fragment-ktx:2.6.0'
  implementation 'androidx.navigation:navigation-ui-ktx:2.6.0'
  implementation 'androidx.preference:preference:1.2.0'
  implementation 'androidx.activity:activity-ktx:1.7.2'
  implementation 'androidx.legacy:legacy-support-v4:1.0.0'
  implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.1'
  implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.6.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
  androidTestImplementation 'androidx.test.ext:junit:1.1.5'
  androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}